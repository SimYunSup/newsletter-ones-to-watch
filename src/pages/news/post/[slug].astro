---
import { getEntry, render } from "astro:content";
import * as cheerio from "cheerio";
import "@/styles/content.css";
import Layout from "@/components/BasicLayout.astro";

export interface Props {
  slug: string;
}

const { slug } = Astro.params;
if (!slug) {
  return Astro.redirect("/404");
}
if (slug.length === 32) {
  const uuid = `${slug.slice(0, 8)}-${slug.slice(8, 12)}-${slug.slice(12, 16)}-${slug.slice(16, 20)}-${slug.slice(20)}`;
  const news = await getEntry("news", uuid);
  if (!news) {
    return Astro.redirect("/404");
  }
  return Astro.redirect(`/news/post/${uuid}`);
}
const news = await getEntry("news", String(slug));
if (!news) {
  return Astro.redirect("/404");
}

interface Match {
  url: string;
  index: number;
}
interface URLSearchResult {
  url: string;
  value: string;
  description?: string;
}

const { env } = Astro.locals.runtime;
if (news.data.cover?.type === "file") {
  const image = await env.IMAGES.head(`thumbnail/${slug}`);
  if (
    !image ||
    !image.httpMetadata?.contentType?.includes("image") ||
    !(image.uploaded instanceof Date)
  ) {
    while (true) {
      const imageResponse = await fetch(news.data.cover.file.url);
      if (!imageResponse.headers.get("content-type")?.includes("image")) {
        await new Promise((resolve) => {
          setTimeout(resolve, 1000);
        });
        continue;
      }
      const imageBuffer = await imageResponse.arrayBuffer();
      await env.IMAGES.put(`thumbnail/${slug}`, imageBuffer, {
        httpMetadata: {
          contentType: imageResponse.headers.get("content-type") ?? "application/octet-stream",
        },
      });
    }
  }
}
let matches: Match[] = [];
const results: URLSearchResult[] = [];
const rendered = cheerio.load(news.rendered!.html);
rendered("a.bookmark-link").each(function (index, element) {
  const elementInstance = rendered(element);
  matches.push({
    url: String(elementInstance.attr("href")),
    index,
  });
});
const MAX_RETRIES = 3;
const RETRY_DELAY_MS = 500; // Delay between retries in milliseconds

const fetchPromises = matches.map(async (match) => {
  const preFetchedResult = await env.NEWSLETTER_CRAWL.get<URLSearchResult>(
    `url:${slug}:${match.url}`,
    "json",
  );
  if (preFetchedResult) {
    return preFetchedResult; // Return cached result if available
  }

  // If not cached, attempt to fetch the URL with retries
  let lastError: any = null;
  for (let attempt = 1; attempt <= MAX_RETRIES; attempt++) {
    try {
      const response = await fetch(match.url, {
        signal: AbortSignal.timeout(10000), // Timeout per attempt
        headers: {
          "Cache-Control": "no-cache",
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const html = await response.text();
      const $ = cheerio.load(html);
      const title = $("head > title").text().trim();
      const value = title || new URL(match.url).host;
      const description = $("meta[name='description']").attr("content")?.trim() ?? "";

      const result: URLSearchResult = {
        url: match.url,
        value: value,
        description: description,
      };

      await env.NEWSLETTER_CRAWL.put(`url:${slug}:${match.url}`, JSON.stringify(result), {
        expirationTtl: 60 * 60 * 24 * 14, // 14 days
      });

      return result;

    } catch (error) {
      lastError = error;
      console.error(`Attempt ${attempt} failed for ${match.url}:`, error instanceof Error ? error.message : error);
      if (attempt < MAX_RETRIES) {
        await new Promise(resolve => setTimeout(resolve, RETRY_DELAY_MS));
      }
    }
  }

  console.error(`All ${MAX_RETRIES} attempts failed for ${match.url}. Last error:`, lastError);
  throw { url: match.url, reason: lastError };
});

const settledResults = await Promise.allSettled(fetchPromises);

settledResults.forEach((settledResult, index) => {
  if (settledResult.status === "fulfilled") {
    results.push(settledResult.value);
  } else {
    const failedUrl = settledResult.reason?.url || matches[index].url;
    console.warn(`Using fallback hostname for ${failedUrl} after failed fetch attempts.`);
    const fallbackResult: URLSearchResult = {
      url: failedUrl,
      value: new URL(failedUrl).host,
    };
    results.push(fallbackResult);
  }
});

results.forEach((result) => {
  rendered(`a.bookmark-link[href='${result.url}']`).replaceWith(
    `<a class="bookmark-link" href="${result.url}" target="_blank" rel="noreferrer">${result.value.replaceAll("<", "&lt;").replaceAll(">", "&gt;")} üîó</a>`,
  );
});
news.rendered!.html = rendered.html();
const { Content } = await render(news);
let thumbnail =
  news.data.cover?.type === "file"
    ? `${env.CDN_URL}/cdn-cgi/image/width=1200/thumbnail/${slug}`
    : undefined;
if (import.meta.env.DEV) {
  const image = await env.IMAGES.get(`thumbnail/${slug}`);

  if (image) {
    const arrayBuffer = await image.arrayBuffer();
    const base64 = Buffer.from(arrayBuffer).toString("base64");
    const contentType = image.httpMetadata?.contentType || "image/jpeg";
    thumbnail = `data:${contentType};base64,${base64}`;
  }
}
---

<Layout
  pageTitle={news.data.properties.Ïù¥Î¶Ñ}
  description={`${news.data.properties.Ïù¥Î¶Ñ} - ${new Intl.DateTimeFormat("ko-KR").format(new Date())}`}
  imageUrl={thumbnail}
>
  <article class="container">
    {
      news.data.cover?.type === "file" && (
        <div class="image-container">
          <img src={thumbnail} alt="" />
        </div>
      )
    }
    <h1 class="title">
      {news.data.properties.Ïù¥Î¶Ñ}
    </h1>
    <div class="description">
      <p>{new Intl.DateTimeFormat("ko-KR").format(news.data.properties.ÎÇ†Ïßú?.start)}</p>
    </div>

    <div class="markdown-body">
      <Content />
    </div>
    <!-- <div class="markdown-body pb-12" set:html={html} /> -->
    <script>
      const markdownElement = document.querySelector(".markdown-body");

      const headingElements = markdownElement?.querySelectorAll("h2");
      if (headingElements) {
        Array.from(headingElements).forEach((element) => {
          element.addEventListener("click", (e) => {
            const targetElement = e.currentTarget;
            if (!(targetElement instanceof Element)) {
              return;
            }
            const id = targetElement?.id;
            if (!id) {
              return;
            }
            const url = new URL(window.document.location.href);
            url.hash = `#${id}`;
            window.document.location.assign(url);
            window.navigator.clipboard.writeText(url.toString());
          });
        });
      }
    </script>
    <script
      src="https://giscus.app/client.js"
      data-repo="SimYunSup/newsletter-ones-to-watch"
      data-repo-id="R_kgDOKO1eRg"
      data-category-id="DIC_kwDOKO1eRs4CZDYo"
      data-mapping="pathname"
      data-strict="0"
      data-reactions-enabled="1"
      data-emit-metadata="0"
      data-input-position="bottom"
      data-theme="preferred_color_scheme"
      data-lang="ko"
      data-loading="lazy"
      crossorigin="anonymous"
      async></script>
  </article>
</Layout>
