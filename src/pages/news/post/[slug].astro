---
import 'github-markdown-css/github-markdown-light.css';
import '@/styles/content.css';
import { createBlockRenderer, NotionRenderer } from '@notion-render/client';
import Layout from '@/components/BasicLayout.astro';

const imageBaseURL = import.meta.env.IMAGE_BASE ?? 'https://cdn-otw.ethansup.net/';

const renderer = new NotionRenderer({
  renderers: [
    createBlockRenderer(
      'bookmark',
      async (data) => {
        const bookmarkData = data.bookmark as any;
        const imageTag = bookmarkData.image ? `<img class="h-28 w-1/5 object-cover" src="${imageBaseURL}${bookmarkData.image}" alt="">` : '';
        let html = `<a href="${bookmarkData.url}" target="_blank" class="mb-2 w-full border-2 border-gray-500 h-28 flex text-gray-950 overflow-hidden" target="_blank">`;
        html += `<div class="h-full w-4/5 flex-auto p-3">`;
        html += `<div class="text-2xl font-bold mb-auto w-full text-ellipsis overflow-hidden whitespace-nowrap h-8">`;
        html += String(bookmarkData.title ?? bookmarkData.url);
        html += '</div>';
        html += '<div class="text-xs lg:text-lg text-gray-700 w-full text-ellipsis h-[calc(100%-2rem)]">';
        html += String(bookmarkData.description ?? '');
        html += '</div>';
        html += '</div>';
        html += imageTag;
        html += '</a>';

        return html;
      },
    ),
    createBlockRenderer(
      'heading_1',
      async (data, renderer) => {
        const child = await renderer.render(...data.heading_1.rich_text);
        let html = `<h1 id="${data.id}" class="notion-${data.type} cursor-pointer notion-color-${data.heading_1.color}">`;
        html += child;
        html += '</h1>';

        return html;
      },
    ),
    createBlockRenderer(
      'heading_2',
      async (data, renderer) => {
        const child = await renderer.render(...data.heading_2.rich_text);
        let html = `<h2 id="${data.id}" class="notion-${data.type} cursor-pointer notion-color-${data.heading_2.color}">`;
        html += child;
        html += '</h2>';

        return html;
      },
    ),
    createBlockRenderer(
      'heading_3',
      async (data, renderer) => {
        const child = await renderer.render(...data.heading_3.rich_text);
        let html = `<h3 id="${data.id}" class="notion-${data.type} cursor-pointer notion-color-${data.heading_3.color}">`;
        html += child;
        html += '</h3>';

        return html;
      },
    ),
  ],
});

const { slug } = Astro.params;
if (!slug) {
  return Astro.redirect('/404');
}

const runtime = Astro.locals.runtime;
const list = await runtime.env.CRAWLER_KV.get(
  'pagination',
  'json',
);
const info = list?.find((item) => item.id === slug) ?? {};
const response = await runtime.env.CRAWLER_KV.get(
  'newsletter' + slug,
  'json',
);

if (!response) {
  return Astro.redirect('/404');
}
const html = await renderer.render(...(response as any));
---
<Layout
  pageTitle={info.title}
  description={`${info.title} - ${info.targetDate}`}
>
  <article
    class="col-span-12 lg:col-span-8 lg:col-start-3 pt-10 px-2 lg:pt-[80px] max-w-3xl mx-auto"
  >
    <h1 class="text-3xl font-semibold mb-8">
      {info.title}
    </h1>
    <div class="flex items-center gap-3 mb-2">
      <div>
        <div class="flex items-center text-gray-400 text-sm gap-1">
          <p>{new Intl.DateTimeFormat('ko-KR').format(new Date(info.date))}</p>
        </div>
      </div>
    </div>
    <div class="markdown-body pb-12" set:html={html} />
    <script client:load>
      const markdownElement = document.querySelector('.markdown-body');

      const headingElements = markdownElement.querySelectorAll('h2');
      Array.from(headingElements).forEach((element) => {
        element.addEventListener('click', (e) => {
          const id = e.currentTarget.id;
          const url = new URL(window.document.location);
          url.hash = `#${id}`;
          window.navigator.clipboard.writeText(
            url.toString(),
          );
        });
      });
    </script>
    <script src="https://giscus.app/client.js"
            data-repo="SimYunSup/newsletter-ones-to-watch"
            data-repo-id="R_kgDOKO1eRg"
            data-category-id="DIC_kwDOKO1eRs4CZDYo"
            data-mapping="pathname"
            data-strict="0"
            data-reactions-enabled="1"
            data-emit-metadata="0"
            data-input-position="bottom"
            data-theme="light"
            data-lang="ko"
            data-loading="lazy"
            crossorigin="anonymous"
            async>
    </script>
  </article>
</Layout>
